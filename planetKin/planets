#!/usr/bin/python
import math
import os
#from sympy import *


###########################PURPOSE################################################## 
#The purpose of this program is to simulate more than one physical body exerting 
#forces on all other bodies using keplers laws and multivariable calculus 
#Authors: Greg Swanson & John Bosiger
####################################################################################


#This class describes a physical body with a position, velocity, acceleration, mass, and forces acting on it.  
#It is intended to only represent the state of the body, not the body across time
class body:
    def __init__(self, bodyName, x, y, z, mass, Vx, Vy, Vz):
	self.name = bodyName 
        self.x = x
        self.y = y
        self.z = z
	self.Vx = Vx
	self.Vy = Vy
	self.Vz = Vz
	self.ax = 0 
	self.ay = 0
	self.az = 0
	
	self.mass = mass

	self.resultantForce = 0
	self.resultantForcex = 0
	self.resultantForcey = 0
	self.resultantForcez = 0
 
    def printStatus(self):
	print self.getName(), 'position =', self.getPrintedPositionVector(), '  mass =', self.mass, 'Velocity =',self.getPrintedVelocityVector(), 'acceleration =', self.getPrintedAccelerationVector()

    def getMass(self):
	return self.mass

    def getLogText(self):

	positionList = ''	
	for position in self.getPositionVector():
		positionList = positionList + str(position) + ','

	velocityList = ''	

	for velocity in self.getVelocityVector():
		velocityList = velocityList + str(velocity) + ','

	accelerationList = ''	

	for acceleration in self.getAccelerationVector():
		accelerationList = accelerationList + str(acceleration) + ','
	
	#print str(self.getPositionVector())
	
	logList = str(self.getMass()) + ',' + str(positionList) + str(velocityList) + str(accelerationList) 
	
	return logList
	
    def getName(self):
        return self.name
 
    def getPositionVector(self):
        return [self.x, self.y, self.z]

	#PRINTING
    def getPrintablePositionVector(self):
       	return ["{:5.2f}".format(self.x),"{:5.2f}".format(self.y),"{:5.2f}".format(self.z)]

    def getVelocityVector(self):
	return [self.Vx, self.Vy, self.Vz]
	
	#PRINTING
    def getPrintableVelocityVector(self):
       	return ["{:5.2f}".format(self.Vx),"{:5.2f}".format(self.Vy),"{:5.2f}".format(self.Vz)]
 
    def getAccelerationVector(self):
	return [self.ax, self.ay, self.az]

	#PRINTING
    def getPrintableAccelerationVector(self):
       	return ["{:5.2f}".format(self.ax),"{:5.2f}".format(self.ay),"{:5.2f}".format(self.az)]
 
    def getResultantForceVector(self):
       	return ["{:5.2f}".format(self.resultantForcex),"{:5.2f}".format(self.resultantForcey),"{:5.2f}".format(self.resultantForcez)]

    def authorName(self, text):
        self.creator = 'Greg' 


#The purpose of this class is to compute the physical changes that occur to bodies that this class knows about
#Currently, only gravitational forces and kinematics of bodies are calculated
class physics:
    def __init__(self, bodies):
	 self.bodies = bodies
	 self.G = .0000000000667
   	 if os.system("ls planetLogFile"):
		os.system("rm -rf planetLogFile") 
	 self.logFileName = 'planetLogFile'
	 self.planetLogFile = open(self.logFileName, 'w')

    def __del__(self):
	self.planetLogFile.close()
 
    def printStatus(self,time):
	print "###Current State after", time, "Seconds###"	
	for body in self.bodies:
		print body.name, 'F', body.getResultantForceVector(), 'Pos', body.getPrintablePositionVector(), 'Vel', body.getPrintableVelocityVector(), 'Acc', body.getPrintableAccelerationVector()

    def writeLog(self, logLine):
	self.planetLogFile.write(logLine + "\n")
    
    def makeLogHeader(self):
	header = ''
	for body in self.bodies:
		header = header + body.name + ',,,,,,,,,,' 	
	header = header + "\n"
	
	for body in self.bodies:
		header = header + "mass,x,y,z,Vx,Vy,Vz,ax,ay,az,"
	header = header + "\n"	

	#logList = self.getPositionVector(), self.getMass(), self.getVelocityVector()
	self.planetLogFile.write(header)
    
    #Computes the force 
    def calculateTotalForce(self, targetBody):
	#Forces don't have inertia (after each pass, forces aren't added like Velocity or position)	
	targetBody.resultantForcex = 0
	targetBody.resultantForcey = 0
	targetBody.resultantForcez = 0

	#For each body, add the forces of all other bodies exerted on the body
	for body in self.bodies:
		if targetBody != body:
			#Break the resultant force into its component values
			
			#print 'calculating forces of ', body.getName(), 'on', targetBody.getName()
		
			componentForces = self.calculateComponentForces(targetBody, body)
			
			#Add the component forces
			targetBody.resultantForcex = targetBody.resultantForcex + componentForces[0] 	
			targetBody.resultantForcey = targetBody.resultantForcey + componentForces[1] 	
			targetBody.resultantForcez = targetBody.resultantForcez + componentForces[2] 	
		
			#print 'Forcex =', targetBody.resultantForcex 
			#print 'Forcey =', targetBody.resultantForcey 
			#print 'Forcez =', targetBody.resultantForcez 

    #Calculates the force between two bodies in the direction pulling the targetBody toward the body
    def calculateComponentForces(self, targetBody, body):
	targetBody.resultantForce = (self.G * targetBody.mass * body.mass)/(self.getDistance(targetBody, body) ** 2 ) 
	distance = self.getDistance(targetBody, body)	

	unitVectorx = (body.x - targetBody.x) / distance
	unitVectory = (body.y - targetBody.y) / distance
	unitVectorz = (body.z - targetBody.z) / distance

	resultantForcex = unitVectorx * targetBody.resultantForce
	resultantForcey = unitVectory * targetBody.resultantForce
	resultantForcez = unitVectorz * targetBody.resultantForce

	return [resultantForcex, resultantForcey, resultantForcez]

	# a = F/m
    def calculateAcceleration(self, body):
	body.ax = body.resultantForcex / body.mass
	body.ay = body.resultantForcey / body.mass
	body.az = body.resultantForcez / body.mass

	# v = vnot + a*t
    def calculateVelocity(self, body, time):
	body.Vx = body.Vx + body.ax * time
	body.Vy = body.Vy + body.ay * time
	body.Vz = body.Vz + body.az * time

	# x = xnot + v*t + 1/2at^2
    def calculatePosition(self, body, time):
	body.x = body.x + (body.Vx * time) + (.5 * body.ax) * (time ** 2)
	body.y = body.y + (body.Vy * time) + (.5 * body.ay) * (time ** 2)
	body.z = body.z + (body.Vz * time) + (.5 * body.az) * (time ** 2)
   

    def getAcceleration(self, body):
	return [body.ax, body.ay, body.az]
    
    def getDistance(self, body1, body2):
	distance = (((body2.x - body1.x) ** 2) + ((body2.y - body1.y) **2)  + ((body2.z - body1.z) **2)) ** .5
	return distance 

    def runSimulation(self, bodyList, time):
	i = 1#not yet	

####################################################################################################
#######################################Start of Program#############################################
####################################################################################################

#              bodyName,  x,               y,                 z,    mass,              Vxinitial,   Vyinitial,   Vzinitial
sun= body(     'sun',     -1072 ,-11810, 69.2 ,1.9801 * (10 **30), 2.22 * (10 ** -3),         -0.0295 * (10 ** -3),         0.0048 * (10 ** -3))
mercury = body('Mercury', -32000000.0,  37400000.0,     6010000.0, 3.3022 * (10 ** 23),-48983.0 * (10 ** -3),    -26756.0 * (10 ** -3),   -2.31)
venus = body(  'Venus',   99.7 * (10 ** 6), 43.7 * (10 ** 6), -5.16 * (10 ** 6), 4.8685 * (10 ** 24),-13241 * (10 ** -3),         32.1,         1.2)
earth = body(  'Earth',   -105 * (10 **6), -106 * (10 ** 6), 5004 ,5.9736 * (10 ** 24),20.5,    -21507.0 * ( 10 ** -3), -0.0895 * (10 ** -3))
mars = body(   'Mars',    -2.199 * (10 ** 8) , 115 * (10 ** 6), 7.81 * (10 ** 6), 6.4185 * (10 ** 23),-10383 * (10 ** -3),-19470.0 * (10 ** -3),-153.0 * (10 ** -3))
jupiter= body( 'Jupiter', 1.6007 * (10 ** 8) ,-7.614 * (10 ** 8) ,-404840, 1.8986 * (10 ** 27),12.6,         3.3,         -297 * (10 ** -3))
saturn = body( 'Saturn',  -1.285 * (10 ** 9), 5.326 * (10 ** 8), 41.9 * (10 ** 6), 5.6846 * (10 ** 26),-4206 * (10 ** -3),-8945 * (10 ** -3)         ,         323 * (10 ** -3))
uranus = body( 'Uranus',  2.947 * (10 ** 9), -5.67 * (10 ** 8), -40.3 * (10 ** 6), 8.6810 * (10 ** 25),1.24 ,6.37 ,7.56 * (10 ** -3))
neptune = body('Neptune', 3.55 * (10 ** 9), -2.77 * (10 ** 9), -24.9 * (10 ** 6), 10.243 * (10 ** 25),3.31 ,4.32 ,-165 * (10 ** -3))
pluto = body(  'Pluto',  -47.3 * (10 ** 6),-4.68 * (10 ** 9),5.15 * (10 ** 8), 1.25 *   (10 ** 22),5.53 ,-1095 * (10 ** -3),-1480 * (10 ** -3))


#define all bodies with mass
bodyList = [sun, mercury, venus, earth, mars, jupiter, saturn, uranus, neptune, pluto]

timeIncrement = 1 #number of seconds between calculations

####TESTING VARIABLES####
testing = False 
if testing == True:
	me= body('Me',          1.0,-6371000.0,1.0,80.0,0.0,0.0,0.0)#radius of earth is 6371000 meters
	bodyList = [me, earth]
	timeIncrement = 3600

newton = physics(bodyList)

#run the physics engine#
logging = True

if logging == True:
	newton.makeLogHeader()	
	count = 0.0
logText = ''

percentComplete = 0
lastDisplayedPercentComplete = 0
print percentComplete, '% percent complete'

iterationCount = 2112
for time in range(0, iterationCount):
	for planet in bodyList:
		newton.calculateTotalForce(planet) 
		newton.calculateAcceleration(planet)	
		newton.calculateVelocity(planet, timeIncrement)
		newton.calculatePosition(planet, timeIncrement)
		if logging == True:
			logText = logText + planet.getLogText()
	if logging == True:
		newton.writeLog(logText)
		logText = ''

	#update percent complete if change in % is > 1		
	if (percentComplete - 1) > lastDisplayedPercentComplete:
		os.system("clear")	
		print percentComplete, '% percent complete'
		lastDisplayedPercentComplete = percentComplete
	
	percentComplete = 100 * (count / iterationCount)
	count = count + 1

totalTime = float(time) * timeIncrement
print 'Simulation Seconds =', totalTime, 'or ', totalTime / 60, 'Minutes or', totalTime /3600, 'Hours or', totalTime /3600/24/365, 'Years'
